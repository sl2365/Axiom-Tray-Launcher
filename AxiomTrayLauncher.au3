;*****************************************
; AxiomTrayLauncher.au3 by sl23
; Code generated by GitHub Copilot 4.1
; Created with ISN AutoIt Studio v1.16
; Compiled with AutoIt v3.3.16.1
;*****************************************
#AutoIt3Wrapper_icon=AxiomTrayIcon.ico
#AutoIt3Wrapper_Res_File_Add=SettingsTemplate.ini, SettingsTemplate.ini, CUSTOM
#AutoIt3Wrapper_Res_Fileversion_First_Increment=Y
#AutoIt3Wrapper_Res_FileVersion_AutoIncrement=Y
#AutoIt3Wrapper_Res_Fileversion=1.0.0.194
#AutoIt3Wrapper_Res_ProductVersion=3.3.16.1
#AutoIt3Wrapper_Res_Description=Axiom Tray Launcher
#AutoIt3Wrapper_Res_LegalCopyright=sl23

#NoTrayIcon

; ----------------- Globals -----------------
Global Const $DEBUG_IPC = 0
DirCreate(@ScriptDir & "\App")
Global Const $INI_FILE = @ScriptDir & "\App\Settings.ini"
Global Const $PORTABLE_LIST_FILE = @ScriptDir & "\PortableAppsList.ini"

Global $Theme, $isDark, $bgColor, $buttonColor, $buttonTextColor, $buttonBorder, $listviewFontColor
Global $selectionColor = 0x3399FF
Global $SandboxieConfigured = False
Global $SandboxiePath = ""
Global $SandboxieServiceName = "SbieSvc"
Global $CloseMenuOnClick = 0
Global $userVars = ObjCreate("Scripting.Dictionary")

; App data columns
Global Const $APP_NAME = 0
Global Const $APP_CAT = 1
Global Const $APP_PATH = 2
Global Const $APP_ARGS = 3
Global Const $APP_SINGLE = 4
Global Const $APP_ADMIN = 5
Global Const $APP_NET = 6
Global Const $APP_SBX_PATH = 7
Global Const $APP_SBX_NAME = 8
Global Const $APP_ASSOC = 9
Global Const $APP_HIDE = 10
Global Const $APP_ID = 11

Global $appsData[1][12]
Global $appsSections[1]
Global $g_CurrentVersion = "1.0.0.169"
Global $g_UpdateInfoURL = "https://yoursite.com/latest.txt"
Global $g_UpdateDownloadURL = "" ; will be parsed from info file
Global $g_UpdateExeName = "AxiomTrayLauncher.exe" ; or whatever your exe is

; IPC globals
Global Const $IPC_WINDOW_TITLE = "AxiomTrayLauncher.IPC.Window"
Global $g_WM_RUNBTN

#include <GUIConstantsEx.au3>
#include "SettingsGUI.au3"
#include "PortableUtils.au3"
#include "EnvVarsListView.au3"
#include "Core.au3" ; IPC + Config + Launcher
#include "UI.au3"   ; Buttons + CLI + Shortcuts + Tray UI
#include "Extensions.au3" ; comment out to disable experiments.

$g_WM_RUNBTN = _WinAPI_RegisterWindowMessage("AxiomTrayLauncher.RunButton")

Local $UpdateOnStart = IniRead(@ScriptDir & "\App\Settings.ini", "GLOBAL", "UpdateOnStart", "1")
If $UpdateOnStart = "1" Then _CheckForUpdateOnStartup()

; ----------------- Program entry -----------------
Local $g_RestartAdmin = False
For $i = 1 To $CMDLINE[0]
    If StringLower($CMDLINE[$i]) = "/restart-admin" Then
        $g_RestartAdmin = True
        ExitLoop
    EndIf
Next

If $g_RestartAdmin Then
    Local $acquired = False
    For $t = 1 To 20
        If _MySingleton("AxiomTrayLauncher", 1) <> 0 Then
            $acquired = True
            ExitLoop
        EndIf
        Sleep(150)
    Next
    If Not $acquired Then
        MsgBox(16, "AxiomTrayLauncher", "Could not take over as admin. Try again.")
        Exit
    EndIf
Else
    ; --- Integrated shortcut/tray logic ---
    Local $hasSkipTo = False
    For $i = 1 To $CMDLINE[0]
        If StringLeft(StringLower($CMDLINE[$i]), 13) = "/skiptobutton" Then
            $hasSkipTo = True
            ExitLoop
        EndIf
    Next

    If _MySingleton("AxiomTrayLauncher", 1) = 0 Then
        ; Secondary instance: only forward /skiptobutton via IPC if argument is present
        If $hasSkipTo Then
            If Buttons_HandleSecondaryInstance() Then Exit
        EndIf
        ; Otherwise just exit (no tray duplication)
        Exit
    EndIf
    ; Primary instance: setup tray and handle skip button below
EndIf

IPC_Init()

; Main instance init
Opt("TrayMenuMode", 3)
EnsureIniExists()
;~ EnsureIniDefaults()
ReadSettings()
ReadApps()
LoadScannedApps()
LoadPortableAppsList()
Buttons_Init()
Extensions_Init()

TrayUI_BuildTrayMenu()

; Update chek on start
If $CMDLINE[0] >= 2 And $CMDLINE[1] = "/updatehelper" Then
    Local $oldExe = $CMDLINE[2]
    ; Wait for old EXE to close
    Local $timeout = TimerInit()
    While ProcessExists(StringRegExpReplace($oldExe, "^.*\\", ""))
        Sleep(500)
        If TimerDiff($timeout) > 10000 Then ExitLoop
    WEnd
    FileDelete($oldExe)
    FileMove(@ScriptFullPath, $oldExe, 1)
    ShellExecute($oldExe, "", @ScriptDir)
    Exit
EndIf

; --- Improved /skiptobutton N and SkipToButton handling ---
Global $skipBtnIdx = -1

; Check for /skiptobutton argument (supports both "/skiptobutton N" and "/skiptobutton", "N")
For $i = 1 To $CmdLine[0]
    If StringLeft($CmdLine[$i], 14) = "/skiptobutton " Then
        $skipBtnIdx = Number(StringTrimLeft($CmdLine[$i], 14))
        ExitLoop
    ElseIf $CmdLine[$i] = "/skiptobutton" And $i < $CmdLine[0] Then
        $skipBtnIdx = Number($CmdLine[$i + 1])
        ExitLoop
    EndIf
Next

; If no argument, check ini for [GLOBAL]SkipToButton
If $skipBtnIdx < 0 Then
    Local $iniBtn = IniRead($INI_FILE, "GLOBAL", "SkipToButton", "")
    If $iniBtn <> "" And StringIsInt($iniBtn) Then $skipBtnIdx = Number($iniBtn)
EndIf

; --- After tray is initialized, launch button if requested ---
If $skipBtnIdx > 0 Then
    ; Give tray a moment to initialize, if needed
    Sleep(200)
    RunButtonById($skipBtnIdx)
    ; Optionally, exit tray if desired after launching
    ; Exit
EndIf

TrayUI_HandleTrayMenu()
